<UserControl x:Class="UI.Views.HalconWindowPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:local="clr-namespace:UI.Views"
      xmlns:halconDotNet="clr-namespace:HalconDotNet;assembly=halcondotnet"
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
      xmlns:converters="clr-namespace:UI.Converters"
      mc:Ignorable="d"
      d:DesignHeight="600"
      d:DesignWidth="800"
      Loaded="HalconWindowPage_OnLoaded">
   
    <DockPanel>
        


        
        <Grid DockPanel.Dock="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="200"/>
            </Grid.ColumnDefinitions>

            <ToolBarTray Panel.ZIndex="0" AllowDrop="False" Grid.Column="0">
                <ToolBar Style="{DynamicResource MaterialDesignToolBar}" VerticalAlignment="Top">
                    <!-- Load images -->
                    <Viewbox>
                        <materialDesign:Badged Badge="{Binding Count}">
                            <Button Command="{Binding SelectImageDirCommand}" ToolTip="Open a image directory">
                                <materialDesign:PackIcon Kind="FolderOpenOutline" />
                            </Button>
                        </materialDesign:Badged>
                    </Viewbox>
                  
                    <Separator />
                    <!-- Run previous image -->
                    <Button Command="{Binding RunPreviousCommand}" ToolTip="Run previous image">
                        <materialDesign:PackIcon Kind="ChevronLeftBox" />
                    </Button>
                    <!-- Run next image -->
                    <Button Command="{Binding RunNextCommand}" ToolTip="Run next image">
                        <materialDesign:PackIcon Kind="ChevronRightBox" />
                    </Button>
                    <Separator />
                    <!-- Run continuously -->
                    <ToggleButton Style="{DynamicResource MaterialDesignSwitchAccentToggleButton}"
                                  ToolTip="Run continuously"
                                  IsChecked="{Binding IsContinuouslyRunning}"
                                  Command="{Binding ContinuousRunCommand}"
                                  CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" />
                    <Separator />
                    
                    <ComboBox ToolTip="Select image index to show in the screen" ItemsSource="{Binding ImageToShowSelectionList}" SelectedIndex="{Binding IndexToShow}" MinWidth="30"></ComboBox>
                    
                    <Separator/>
                    <!-- Select image and run -->
                    <materialDesign:Chip Margin="5" FontSize="20"
                                         VerticalAlignment="Center" Panel.ZIndex="4"
                                         Background="{DynamicResource SecondaryAccentBrush}">
                        <materialDesign:Chip.Icon>
                            <TextBlock Text="{Binding CurrentIndex}" ToolTip="Current image index"></TextBlock>
                        </materialDesign:Chip.Icon>
                        <Viewbox>
                            <ComboBox ToolTip="Select an image to run" MinWidth="80"
                                      ItemsSource="{Binding ImageNames}"
                                      VerticalAlignment="Top" HorizontalAlignment="Center"
                                      Foreground="{DynamicResource PrimaryHueDarkBrush}" FontWeight="Bold">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding ImageNameSelectionChangedCommand}" CommandParameter="{Binding SelectedIndex, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBox>
                        </Viewbox>
                    </materialDesign:Chip>
                </ToolBar>
            </ToolBarTray>

            
        
            
       
        </Grid>


        <Grid DockPanel.Dock="Top" >
            <!-- Current image name -->
            <materialDesign:ColorZone TextElement.Foreground="AliceBlue" 
                                      TextElement.FontSize="30" Background="{DynamicResource PrimaryHueDarkBrush}"
                                      CornerRadius="15" Margin="80 50" VerticalAlignment="Top" HorizontalAlignment="Right"
                                      Panel.ZIndex="2"> 
                    <TextBlock Text="{Binding CurrentImageName}"/>
            </materialDesign:ColorZone>
            
            <!-- Halcon window -->
     
            <halconDotNet:HSmartWindowControlWPF Name="HalconWindow" Panel.ZIndex="1" ToolTip="{Binding XYGrayValue}">
      
                <!-- <halconDotNet:HIconicDisplayObjectWPF IconicObject="{Binding DisplayImage}" /> -->
             <i:Interaction.Behaviors>
                 <converters:EventToCommandBehavior Event="HMouseMove" Command="{Binding DisplayXYGrayCommand}" PassArguments="True"></converters:EventToCommandBehavior>
             </i:Interaction.Behaviors>

            </halconDotNet:HSmartWindowControlWPF>
            
            <Popup IsOpen="{Binding ShouldImageInfoDisplay}" Placement="Relative" HorizontalOffset="{Binding MouseX}" VerticalOffset="{Binding MouseY}" PlacementTarget="{Binding ElementName=HalconWindow}">
               <local:ImageInfoView DataContext="{Binding GrayValueInfo}"/>
            </Popup>



            <!-- Snack bar -->
            <materialDesign:Snackbar Grid.Column="0" Name="SnackBar" MessageQueue="{Binding RunStatusMessageQueue}"
                                     VerticalAlignment="Top" Panel.ZIndex="2"
                                     Foreground="{DynamicResource PrimaryHueDarkBrush}"
                                     Background="{DynamicResource SecondaryAccentBrush}" />

            <!-- Find line param LIST -->
            <Expander Background="Transparent" HorizontalAlignment="Left" 
                      Panel.ZIndex="2" Foreground="AliceBlue"
                      FontSize="24"
                      ExpandDirection="Left">
                <Expander.Header>
                    <TextBlock
                        Text="Find line parameters"
                        RenderTransformOrigin=".5,.5">
                        <TextBlock.LayoutTransform>
                            <RotateTransform
                                Angle="90" />
                        </TextBlock.LayoutTransform>
                    </TextBlock>
                </Expander.Header>
                <ScrollViewer HorizontalScrollBarVisibility="Auto">
                    <DataGrid HorizontalAlignment="Right"
                              ItemsSource="{Binding FindLineParams}"
                              CanUserSortColumns="True"
                              CanUserAddRows="False" 
                    />
                </ScrollViewer>
            </Expander>


            

            <!-- FAI LIST -->
            <Expander  Background="Transparent" VerticalAlignment="Top" Panel.ZIndex="3" FontSize="24"
                      HorizontalAlignment="Right" Foreground="AliceBlue"
                      ExpandDirection="Left">
                <Expander.Header>
                    <TextBlock
                        Text="Outputs"
                        RenderTransformOrigin=".5,.5">
                        <TextBlock.LayoutTransform>
                            <RotateTransform
                                Angle="90" />
                        </TextBlock.LayoutTransform>
                    </TextBlock>
                </Expander.Header>
                <DataGrid HorizontalAlignment="Right"
                          ItemsSource="{Binding FaiItems, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                          CanUserSortColumns="True"
                          CanUserAddRows="False" />
            </Expander>

            <!--status area-->
            <GroupBox VerticalAlignment="Bottom" HorizontalAlignment="Left" Header="{Binding ProcedureName}" Panel.ZIndex="3"
                      FontSize="16">
                <StackPanel Orientation="Horizontal" Background="AliceBlue" MinWidth="150">
                    <TextBlock>Time elapsed:</TextBlock>
                    <TextBlock HorizontalAlignment="Center" Text="{Binding TimeElapsed}" />
                </StackPanel>
            </GroupBox>
            
        </Grid>

    </DockPanel>
</UserControl>